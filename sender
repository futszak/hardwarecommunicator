#!/usr/bin/env python
# -*- coding:utf-8 -*-

from gps3 import gps3
import socket
import sys
import time
import math
import os
import json
import bz2
import thread
import random
import senderconfig as config
import subprocess
import requests as req
from pyA20.gpio import gpio
from pyA20.gpio import port


sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)  # for UDP logging
sock.settimeout(5)
afterstart = True
livestream = False
li = []
jsn = int(time.time()) + config.config['jsonlengt']
circuiton = True
tryrestart = 0
withdatapacket = 0
datapacket = 0
alive = int(time.time()) + config.config['alive']
slongitude = 6549345
slatitude = 3365845
red = 0


def resetdevice():
    lines('red', True)
    lines('white', True)
    lines('blue', True)
    logsend("RESET MACHINE...")
    subprocess.call("/sbin/reboot")


def lamprestart(y=False):
    x = 0
    while x < 5:
        if y:
            lines('red', True)
        lines('white', True)
        lines('blue', True)
        time.sleep(0.15)
        lines('red', False)
        lines('white', False)
        lines('blue', False)
        time.sleep(0.15)
        x = x + 1


def blinktimer(colour):
    lines(colour, True)
    time.sleep(0.3)
    lines(colour, False)


def blink(colour):
    thread.start_new_thread(blinktimer, (colour, ))


def redled(state):
    global red
    if state:
        red = red + 1
    else:
        red = red - 1
    if red:
        lines('red', True)
    else:
        lines('red', False)


def restart():
    lamprestart(True)
    time.sleep(config.config['trytorestart'])
    python = sys.executable
    os.execl(python, python, * sys.argv)


def lines(colour, state=False):
    if (colour == "red"):
        if state:
            gpio.output(port.PG7, gpio.LOW)
        else:
            gpio.output(port.PG7, gpio.HIGH)
        return('ok')
    else:
        if (colour == "white"):
            if state:
                gpio.output(port.PG6, gpio.LOW)
            else:
                gpio.output(port.PG6, gpio.HIGH)
            return('ok')
        if (colour == "blue"):
            if state:
                gpio.output(port.PG9, gpio.LOW)
            else:
                gpio.output(port.PG9, gpio.HIGH)
            return('ok')
        if (colour == "init"):
            gpio.init()
            # leds
            gpio.setcfg(port.PG9, gpio.OUTPUT)
            gpio.setcfg(port.PG7, gpio.OUTPUT)
            gpio.setcfg(port.PG6, gpio.OUTPUT)
            # solid state relay
            gpio.setcfg(port.PG8, gpio.OUTPUT)
            gpio.output(port.PG8, gpio.HIGH)
            return('lines init ok')
        return('error')


def temperature():
    if config.config['debug']:
        logsend('Enter temperature')
    """Read device temperature."""
    f = open('/sys/devices/virtual/thermal/thermal_zone0/temp')
    t = str(f.readline())
    temp = (t[0]+t[1])
    f.close()
    return(temp)


def logsend(s):
    """Write log."""
    global alive
    nt = (config.config['PROCNAME'])+" "+str((int(time.time())))+': '
    ip = config.config['UDP_IP']
    port = config.config['UDP_PORT']
    try:
        sock.sendto((nt+str(s)+'\n'), (ip, port))
        alive = int(time.time()) + config.config['alive']
    except:
        time.sleep(10)
        restart()


def devicestate():
    global circuiton
    if config.config['debug']:
        logsend('Enter devicestate procedure')
    if circuiton:
        return("eON_temp="+temperature()+(" ")+id())
    else:
        return("eOFF_temp="+temperature()+(" ")+id())


def savedata(data):
    """Save compresed packets to files because no Internet"""
    if config.config['debug']:
        logsend('Data will be saved...')
    filename = (config.config['savefilename'])+str(int(time.time()))
    plik = open(filename, 'wb')
    plik.write(data)
    plik.close()
    if config.config['debug']:
        logsend(str(filename)+" with data saved")


def httpsendth(data, filename):
    logsend(httpsend(data))
    if httpsend(data) != "error":
        os.remove(filename)
        logsend(str(filename)+" deleted")


def loaddata(tcpCliSock='0'):
    global tryrestart
    if config.config['debug']:
        logsend('Enter to loaddata procedure...')
    li = []
    for a in os.listdir('.'):
        if (a[:(len(config.config['savefilename']))]) == (config.config['savefilename']):
            li.append(a)
    thr = 0
    for a in li:
        plik = open(a, 'rb')
        if config.config['debug']:
            logsend('File '+a+' opened...')
        tekst = plik.read()
        plik.close()
        if config.config['debug']:
            logsend('thr = '+str(thr))
        if config.config['httpsend']:
            if (thr > config.config['connections']):
                break
            thread.start_new_thread(httpsendth, (tekst, a))
            thr = thr + 1
        else:
            try:
                tcpCliSock.send(tekst)
                if config.config['debug']:
                    logsend('File '+a+' sended')
                os.remove(a)
                logsend(str(a)+" deleted")
            except:
                if config.config['debug']:
                    logsend('Error manipulation with file '+a+'')
                    return()
            if switch(tcpCliSock):
                pass
            else:
                return()
        if config.config['debug']:
            logsend('remote info from server recieved')
    tryrestart = 0


def entry(packet):
    if config.config['debug']:
        logsend('Creating json packet')
    entry = {
        "time": packet.split()[0],
        "longitude": packet.split()[1],
        "latitude": packet.split()[2],
        "state": str(packet.split()[3]),
        "deviceid": str(packet.split()[4]),
    }
    return(entry)


def switch(tcpCliSock, h=False):
    if config.config['debug']:
        logsend("enter switch procedure")
        if h:
            logsend("in http mode")
    global livestream
    global circuiton
    wh = True
    servanswer = 0
    if h:
        if (tcpCliSock == "error"):
            return(False)
        recv = tcpCliSock
    else:
        while wh:
            try:
                recv = tcpCliSock.recv(1024)
                wh = False
            except:
                logsend("waiting for server answer")
                servanswer += 1
                if (servanswer > config.config['waitingforserveranswer']):
                    restart()
                time.sleep(0.1)
    if config.config['debug']:
        logsend("recvvv = "+str(recv))
    if recv == ("ok"):
        livestream = True
        if config.config['debug']:
            logsend("livestream is True")
        return(True)
    if recv == ("no"):
        livestream = False
        if config.config['debug']:
            logsend("livestream is False")
        return(True)
    if recv == ("off"):
        livestream = True
        logsend("circuit off message was recieved")
        gpio.output(port.PG8, gpio.LOW)
        circuiton = False
        return(True)
    if recv == ("on"):
        livestream = True
        if config.config['debug']:
            logsend("circuit ON !!!")
        gpio.output(port.PG8, gpio.HIGH)
        circuiton = True
        return(True)
    if recv == ("restart"):
        restart()
        return(True)
    if recv == ("reset"):
        resetdevice()
        return(True)
    else:
        logsend("no data from server")
        return(False)


def httpsend(data):
    global alive
    try:
        redled(True)
        r = req.post(config.config['reporting_url'], data=data, headers={'Content-Type': 'application/x-www-form-urlencoded'})
    except:
        if config.config['GPSFAKEDATA']:
            blink('blue')
        else:
            blink('white')
            redled(False)
            return("error")
    alive = int(time.time()) + config.config['alive']
    redled(False)
    switch((r.text), 1)
    return(r.text)


def sendingdata(tcpCliSock, data):
    global afterstart
    global jsn
    global tryrestart
    global livestream
    global alive
    global datapacket
    global withdatapacket
    if config.config['debug']:
        logsend('Enter sendingdata procedure data = '+str(data))
    if afterstart:
        dataheader = str("sh0rt ")
        afterstart = False
    else:
        dataheader = str("short ")
    datasend = dataheader+data
    # livestream = True
    if tcpCliSock == ("offline"):
        livestream = False
    if livestream:
        if config.config['debug']:
            logsend('sendingdata:  livestream is TRUE')
        if config.config['httpsend']:
            if config.config['debug']:
                logsend("preparing short json packet")
            compdata = bz2.compress(datasend)
            hs = httpsend(compdata)
            # if config.config['debug']:
            #     logsend(hs)
            # switch(hs, 1)
            if (hs == "error"):
                logsend("error with http "+datasend)
        else:
            try:
                if config.config['debug']:
                    logsend('sendingdata:  try sending')
                tcpCliSock.send(datasend)
                if config.config['debug']:
                    logsend('sendingdata:  sending OK')
                if config.config['debug']:
                    logsend("small packet was send to server...")
                if not switch(tcpCliSock):
                    restart()
            except socket.error, msg:
                if config.config['debug']:
                    logsend('sendingdata:  socket ERROR')
                logsend("socket errot -> "+str(msg))
                logsend("lost packet -> "+str(datasend))
                restart()
    else:
        if config.config['debug']:
            logsend('sendingdata:  no livestream and append data')
        li.append(data)
        data1 = data.split(" ")
        if ((data1[1]) != "99.999999999") and ((data1[1]) != "n/a"):
            if config.config['debug']:
                logsend('sendingdata:  packet is TRUE')
            withdatapacket += 1
        if config.config['debug']:
            logsend(str(jsn)+' = jsn time = '+str(int(time.time())))
            logsend(str(datapacket)+' = data wdata = '+str(withdatapacket))
        tm = int(time.time())
        if (jsn < tm) or (math.fabs(jsn-tm) > (config.config['jsonlengt']+20)):
            if config.config['debug']:
                logsend('sendingdata:  json packet is FULL')
            if withdatapacket == 0:
                if config.config['debug']:
                    logsend('sendingdata: in json no packet with real data')
                datapacket += 1
            else:
                datapacket = 0
            withdatapacket = 0
            if datapacket > 4:
                if config.config['debug']:
                    logsend('sendingdata:  to many packet with no real data')
                resetdevice()
            li.reverse()
            if config.config['debug']:
                logsend('sendingdata:  reversing list')
            packet = []
            while li != []:
                packet.append(entry(li.pop()))
            if config.config['debug']:
                logsend('sendingdata:  compression data')
            compdata = bz2.compress(json.dumps(packet))
            if tcpCliSock == ("offline"):
                savedata(compdata)
                if tryrestart > config.config['trytorestart']:
                    restart()
                tryrestart += 1
            else:
                if config.config['debug']:
                    logsend('sendingdata:  going to sending compress data')
                #  send ing data via http
                if config.config['httpsend']:
                    hs = httpsend(compdata)
                    # switch(hs, 1)
                    logsend(hs)
                    if (hs != "error"):
                        loaddata()
                    else:
                        savedata(compdata)
                else:
                    try:
                        #  sending 2 server via tcpCliSock
                        tcpCliSock.send(compdata)
                        if config.config['debug']:
                            logsend("send data OK")
                        #  recieving data from server
                        if switch(tcpCliSock):
                            if config.config['debug']:
                                logsend("Data was recieved by server")
                            loaddata(tcpCliSock)
                        else:
                            logsend("Data was not recieved by server")
                            savedata(compdata)
                    except:
                        logsend("send or recv data FALSE")
                        savedata(compdata)
                        if tryrestart > config.config['trytorestart']:
                            restart()
                        tryrestart += 1
            jsn = int(time.time()) + config.config['jsonlengt']
            if config.config['debug']:
                logsend('sendingdata:  new json-end value')
        if config.config['debug']:
            logsend('sendingdata:  end of procedure')


def id():
    return(config.config['deviceid'])


def slong():
    global slongitude
    slongitude = slongitude+int((random.random())*10000)
    return(str(slongitude)[0:7])


def slat():
    global slatitude
    slatitude = slatitude+int((random.random())*10000)
    return(str(slatitude)[0:7])


def sendergps(tcpCliSock):
    blink('white')
    global alive
    global slatitude
    global withdatapacket
    if config.config['debug']:
        logsend('Enter senderGPS procedure')
    ldata = 0
    logsend("sendergps lets'go")
    gps_socket = gps3.GPSDSocket()
    data_stream = gps3.DataStream()
    gps_socket.connect()
    gps_socket.watch()
    while True:
        if config.config['debug']:
            logsend('senderGPS:  begin of main while')
        for new_data in gps_socket:
            if int(time.time()) > alive:
                blink('white')
                logsend('alive temp='+temperature())
                d = str(int(time.time()))+(" 99.999999999 99.999999999 ")
                sendingdata(tcpCliSock, d+devicestate())
                if config.config['debug']:
                    logsend('return from sendingdata (perdiodic fake data)')
            if new_data:
                data_stream.unpack(new_data)
                data1 = (str(int(time.time()))+(" "))
                dslat = str(data_stream.TPV['lat'])
                data2 = str(data_stream.TPV['lon'])+(" ")+dslat
                if not (data2 == ldata):
                    blink('blue')
                    data = data1 + data2 + (" ") + devicestate()
                    ldata = data2
                    sendingdata(tcpCliSock, data)
                    if config.config['debug']:
                        logsend('return from sendingdata (data from GPS)')
            else:
                if config.config['GPSFAKEDATA']:
                    blink('white')
                    d0 = str(int(time.time()))+(" 21.")
                    d1 = slong()+(" 52.")
                    d2 = slat()+(" ")+devicestate()
                    sendingdata(tcpCliSock, d0+d1+d2)
                    if config.config['debug']:
                        logsend('return from sendingdata (data from random)')
                    time.sleep(1)


def tcpinit():
    for res in socket.getaddrinfo(config.config['HOST'], config.config['PORT'], socket.AF_UNSPEC, socket.SOCK_STREAM):
        af, socktype, proto, canonname, sa = res
        try:
            tcpCliSock = socket.socket(af, socktype, proto)
            logsend('Preparing data socket:')
            tcpCliSock.settimeout(config.config['TMOUT'])
            logsend('Preparing networksocket options')
        except socket.error, msg:
            logsend(msg)
            tcpCliSock = None

        try:
            tcpCliSock.connect(sa)
            destin = (' to port: ')+str(config.config['PORT'])
            logsend("".join('Connection from: ')+str(config.config['HOST'])+destin)
        except socket.error, msg:
            logsend('cannot be connection establish')
            tcpCliSock.close()
            tcpCliSock = None
            continue
        break

    if tcpCliSock is None:
        logsend('cannot be data socket established !')
        logsend('working in offline mode')
        sendergps("offline")
    else:
        logsend('Data socket ready !!!')

    data = "gps"
    tcpCliSock.send(data)
    try:
        data = tcpCliSock.recv(1024)
    except:
        restart()
    logsend(data)
    if data == ("gps mode OK"):
        #  print("przeskok")
        sendergps(tcpCliSock)
    tcpCliSock.close()
    logsend('remote server closed')
    restart()


def main():
    # tcpCliSock = None
    logsend(lines('init'))
    lamprestart()
    if config.config['httpsend']:
        logsend("sendergps in HTTP mode lets'go")
        sendergps("http")
    else:
        logsend("sendergps in TCP mode lets'go")
        tcpinit()


if __name__ == '__main__':
    sys.exit(main())
