#!/usr/bin/env python
# -*- coding:utf-8 -*-

from flask import Flask, render_template, redirect, request, send_from_directory
import communicatorconfig as config
import sys
import os
import socket
import thread
import MySQLdb
import datetime as dt
import time
import bz2
import json


# global variables
# clean line
count = 0
sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) # UDP
app = Flask(__name__)
ldtime = 0
sstatechange = False  # Switch State Changed
sstate = True  # Switch State
rsstate = True  # Remote switch state
lastposition = "https://maps.googleapis.com/maps/api/staticmap?center=52.000611,21.000067167&zoom=16&size=400x400&markers=color:red%7Clabel:D%7C52.285611,21.036067167&key=AIzaSyDI39Yn7r299GZTDbuHhn9lsVL70BGmV4A"
lasturltime = 0


# Frontend aplication named Flask
@app.route("/")
def maine():
    global rsstate
    webtimereset(config.config['WEBtimeout'])
    if deviceon(False):
        if rsstate:
            return render_template('index.html')
        else:
            return render_template('indexoff.html')
    else:
        return render_template('index2.html')


@app.route("/engineoff")
def engoff():
    logsend("REFRESH")
    webtimereset(config.config['WEBtimeout'])
    siteremote("off")
    return render_template('engineoff.html')


@app.route("/engineon")
def engon():
    logsend("REFRESH")
    webtimereset(config.config['WEBtimeout'])
    siteremote("on")
    return render_template('engineon.html')


@app.route("/mapa")
def rendermap():
    tblrender("templates/history.html", 5)
    global lastposition
    return redirect(lastposition, code=302)
    # return render_template('3.html', navi)


@app.route("/history")
def history():
    tblrender("templates/history.html")
    # return render_template('history.html')
    return send_from_directory('/home/futszak/gr0m/templates', 'history.html')


@app.route("/today")
def today():
    tblrender("templates/history.html", 1)
    # return render_template('history.html')
    return send_from_directory('/home/futszak/gr0m/templates', 'history.html')


@app.route("/yesterday")
def yesterday():
    tblrender("templates/history.html", 2)
    # return render_template('history.html')
    return send_from_directory('/home/futszak/gr0m/templates', 'history.html')


@app.route("/month")
def month():
    tblrender("templates/history.html", 3)
    # return render_template('history.html')
    return send_from_directory('/home/futszak/gr0m/templates', 'history.html')


@app.route("/pmonth")
def pmonth():
    tblrender("templates/history.html", 3)
    # return render_template('history.html')
    return send_from_directory('/home/futszak/gr0m/templates', 'history.html')


@app.route("/<var>")
def other(var):
    try:
        logsend(int(var))
    except:
        return redirect("/", code=302)
    return redirect(createmaplink(var), code=302)


def createmaplink(timestamp):
    bgn = "https://maps.googleapis.com/maps/api/staticmap?center="
    mdl = "&zoom=15&size=600x600&markers=color:red%7Clabel:D%7C"
    end = "&key="
    db = MySQLdb.connect(config.config['DB_HOSTNAME'],
                         config.config['DB_USERNAME'],
                         config.config['DB_PASSWORD'],
                         config.config['DB_DBNAME'])
    cur = db.cursor()
    cond = " WHERE time="+str(timestamp)+str(";")
    cur.execute("SELECT * FROM "+config.config['DB_TABLENAME']+cond)
    repl = (cur.fetchall()[0])
    logsend(str(repl))
    return(bgn+repl[3]+","+repl[2]+mdl+repl[3]+","+repl[2]+end+config.config['googlekey'])


def renderurlmap(time, lat, lon):
    global lasturltime
    global lastposition
    bgn = "https://maps.googleapis.com/maps/api/staticmap?center="
    mdl = "&zoom=15&size=600x600&markers=color:red%7Clabel:D%7C"
    end = "&key="
    if (time > lasturltime):
        rtn = bgn+(str(lon)+(",")+str(lat))+mdl+(str(lon)+(",")+str(lat))
        rt2 = end + config.config["googlekey"]
        lastposition = rtn + rt2
        lasturltime = time
        return()


def deviceon(cmmd):
    global ldtime
    if cmmd:
        ldtime = int(str(time.time())[0:10])
    else:
        if ((ldtime + config.config['WEBtesttimeout']) < int(str(time.time())[0:10])):
            return(False)
        else:
            return(True)


def siteremote(cmmd):
    global sstatechange
    global sstate
    if (cmmd == ("off")):
        sstatechange = True
        sstate = False
        logsend("setenginestate -> OFF")
    if cmmd == ("on"):
        sstatechange = True
        sstate = True
        logsend("setenginestate -> ON")


def period(clientsock):
    global sstatechange
    global sstate
    if sstate:
        clientsock.send("on")
    else:
        clientsock.send("off")
    sstatechange = False


def frontend():
    app.run(host='0.0.0.0')
    logsend("Frontend is UP")
    exit()


def webtimereset(timeadd):
    global lastwebtime
    lastwebtime = int(str(time.time())[0:10])+timeadd
    if config.config['debug']:
        logsend("webtime was reset")


def logsend(s):
    """Write log."""
    sock.sendto(((config.config['PROCNAME'])+" "+str((int(time.time())))+': '+str(s)+'\n'), (config.config['UDP_IP'], config.config['UDP_PORT']))




def testmaxtime(fetch):
    lt = 0
    for row in fetch:
        if (lt < int(row[1]) and row[2] != "99.999999999"):
            lt = int(row[1])
    return(lt)


def tblrender(filename, sw=0):
    db = MySQLdb.connect(config.config['DB_HOSTNAME'],
                         config.config['DB_USERNAME'],
                         config.config['DB_PASSWORD'],
                         config.config['DB_DBNAME'])
    cur = db.cursor()
    ord = " ORDER BY time DESC"
    cur.execute("SELECT * FROM "+config.config['DB_TABLENAME']+ord)
    begin = """<!doctype html>
    <html>
    <head>
    <meta http-equiv="refresh" content="60">
    <link href="http://getbootstrap.com/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="http://getbootstrap.com/examples/jumbotron-narrow/jumbotron-narrow.css" rel="stylesheet">
    <style>
    table, th, td {
    border: 1px solid black;
    }
    </style>
    </head>
    <body>

        <div id="wrapper">
            <div id="page-wrapper">
                <div class="container-fluid">
                    <!-- /.row -->
                    <div class="row">
                      <div class="col-lg-3 text-center">
                            <div class="alert alert-info">
                                <a href="today"><strong>Dzisiejsza</strong> historia auta</a>
                            </div>
                      </div>
                      <div class="col-lg-3 text-center">
                            <div class="alert alert-info">
                                <a href="month"><strong>Cała</strong> historia auta</a>
                            </div>
                      </div>
                      <div class="col-lg-6 text-center">
                            <div class="alert alert-info">
                                <a href="/"><strong>Powrót</strong> do panelu sterowania</a>
                            </div>
                      </div>
                        <!-- /.between components -->
                    <!-- /.row -->
                </div>
                <!-- /.container-fluid -->
            </div>
            <!-- /#page-wrapper -->
        </div>
        <!-- /#wrapper -->
        <!-- jQuery -->
        <script src="js/jquery.js"></script>
        <!-- Bootstrap Core JavaScript -->
        <script src="js/bootstrap.min.js"></script>

    <table style="width:100%">
    <tr>
    <th>Data i godzina</th>
    <th>Wspolrzedne geograficzne</th>
    <th>Stan obwodu</th>
    </tr>
    """
    p1 = "  <tr>"
    p2 = "  </tr>"
    t1 = "    <th>"
    t2 = "    </th>"
    a11 = '<a href="'
    a12 = '">'
    a2 = '</a>'
    try:
        os.remove(filename)
    except:
        logsend("no file with old table")
    fetch = cur.fetchall()
    db.close()
    if sw == 5:
        for row in fetch:
            if testmaxtime(fetch) == int(row[1]):
                renderurlmap(row[1], row[2], row[3])
                return()
    plik = open(filename, 'wb')
    l2 = 0
    count = 0
    plik.write(begin)
    # set this day, month
    day = (dt.datetime.fromtimestamp(int(time.time()))).strftime('%d')
    month = (dt.datetime.fromtimestamp(int(time.time()))).strftime('%m')
    for row in fetch:
        hum = (dt.datetime.fromtimestamp(int(row[1]))).strftime('%Y%m%d %H:%M')
        l1 = (dt.datetime.fromtimestamp(int(row[1]))).strftime('%H%M')
        if not (l1 == l2):
            r1 = str(row[1])
            rowday = (dt.datetime.fromtimestamp(int(row[1]))).strftime('%d')
            rowmonth = (dt.datetime.fromtimestamp(int(row[1]))).strftime('%m')
            if (sw == 1):
                if (rowday == day and row[2] != "99.999999999"):
                    plik.write(p1)
                    plik.write(t1+hum+t2)
                    plik.write(t1+a11+r1+a12+row[2]+" "+row[3]+a2+t2)
                    plik.write(t1+row[4]+t2)
                    plik.write(p2)
            if (sw == 2):
                if (rowday == (int(day)-1) and row[2] != "99.999999999"):
                    plik.write(p1)
                    plik.write(t1+hum+t2)
                    plik.write(t1+a11+r1+a12+row[2]+" "+row[3]+a2+t2)
                    plik.write(t1+row[4]+t2)
                    plik.write(p2)
            if (sw == 3):
                if (month == rowmonth and row[2] != "99.999999999"):
                    plik.write(p1)
                    plik.write(t1+hum+t2)
                    plik.write(t1+a11+r1+a12+row[2]+" "+row[3]+a2+t2)
                    plik.write(t1+row[4]+t2)
                    plik.write(p2)
            if (sw == 4):
                if (month == (rowmonth-1) and row[2] != "99.999999999"):
                    plik.write(p1)
                    plik.write(t1+hum+t2)
                    plik.write(t1+a11+r1+a12+row[2]+" "+row[3]+a2+t2)
                    plik.write(t1+row[4]+t2)
                    plik.write(p2)
            if (sw == 0 and row[2] != "99.999999999"):
                count += 1
                plik.write(p1)
                plik.write(t1+hum+t2)
                plik.write(t1+a11+r1+a12+row[2]+" "+row[3]+a2+t2)
                plik.write(t1+row[4]+t2)
                plik.write(p2)
                if count > 100:
                    endoftablerender(plik, db)
                    return()
        l2 = (dt.datetime.fromtimestamp(int(row[1]))).strftime('%H%M')
    endoftablerender(plik, db)
    return()


def endoftablerender(plik, db):
    post = "</table>"
    end = """</body>
    </html>"""
    plik.write(post)
    plik.write(end)
    plik.close()
    return()

def dbwrite(time, longitude, latitude, state, x, conn):
    #  creating database command
    c1 = """INSERT INTO `"""
    c2 = """`.`"""
    c3 = """` (`time`, `longitude`, `latitude`, `state`) VALUES ('"""
    curexecute = c1 + config.config['DB_DBNAME'] + c2 + config.config['DB_TABLENAME'] + c3
    curepoint = """', '"""
    cureend = """');"""
    if config.config['debug']:
        logsend("sending to base "+time+" "+longitude+" "+latitude+" "+state)
    cmmd1 = str(curexecute+time+curepoint+longitude+curepoint+latitude)
    cmmd2 = str(curepoint+state+cureend)
    # renderurlmap(time, longitude, latitude)
    #  sending command with data to database
    x.execute(cmmd1+cmmd2)
    # database commit
    conn.commit()


def gpsmode(clientsock):
    global lastwebtime
    global sstatechange
    global rsstate
    if config.config['debug']:
        logsend('Enter GPS mode...')
    # set connection to database
    conn = MySQLdb.connect(host=config.config['DB_HOSTNAME'],
                           user=config.config['DB_USERNAME'],
                           passwd=config.config['DB_PASSWORD'],
                           db=config.config['DB_DBNAME'])
    x = conn.cursor()
    clientsock.send('gps mode OK')
    if config.config['debug']:
        logsend('Enter recv mode...')
    # main loop
    while 1:
        # data recieved
        try:
            data = clientsock.recv(config.config['BUFSIZ'])
        except:
            logsend("device disconnected")
            x.close()
            conn.close()
            break
        # condition if client disconnected
        if data.split() == []:
            logsend("device disconnected")
            x.close()
            conn.close()
            break
        # condition if short data recieved
        if (data.split()[0]) == ("short"):
            deviceon(True)
            dbwrite(data.split()[1], data.split()[2],
                    data.split()[3], data.split()[4], x, conn)
            if (str(data.split()[4])[0:3]) == ("eON"):
                rsstate = True
            if (str(data.split()[4])[0:4]) == ("eOFF"):
                rsstate = False
            # logsend((data.split()[4])[0:3])
        # trying decompress data
        else:
            try:
                rozp = json.loads(bz2.decompress(data))
                if config.config['debug']:
                    logsend("i have decompressed")
            # recieved data ok and going to dbwrite
                for a in range(0, len(rozp)):
                    # st = ("long test")
                    dbwrite(rozp[a]['time'],
                            rozp[a]['longitude'],
                            rozp[a]['latitude'],
                            rozp[a]['state'], x, conn)
            # recieved data damaged and connection closed
            except:
                logsend("recieved data damaged and connection closed")
                x.close()
                conn.close()
                break
                logsend("main loop return")
        if sstatechange:
            period(clientsock)
        else:
            if (int(str(time.time())[0:10])) > lastwebtime:
                clientsock.send("no")
            else:
                clientsock.send("ok")


def handler(clientsock, addr):
    global count

    if count < config.config['MAX_CONNECTION']:

        count += 1
        if config.config['debug']:
            logsend('Enter new client')
        logsend("numbers of clients is -> "+str(count))
        while 1:
            data = clientsock.recv(config.config['BUFSIZ'])
            if not data:
                break
            if data == "gps":
                gpsmode(clientsock)
    # end this thread
        if config.config['debug']:
            logsend('Client was close')
        count -= 1
        logsend("numbers of clients is -> "+str(count))

    else:
        logsend('to many connections')
        clientsock.send('to many connections, please try agin later')
        logsend("".join('Client ')+str(addr)+(' session ended '))
        clientsock.close()


def main():
  # thread.start_new_thread(app.run(host='0.0.0.0'))
  logsend("begin main")
  serversock = None
  for res in socket.getaddrinfo((config.config['HOST']), config.config['PORT'], socket.AF_UNSPEC, socket.SOCK_STREAM, 0, socket.AI_PASSIVE):
    af, socktype, proto, canonname, sa = res
    logsend (res)
    try:
      serversock = socket.socket(af, socktype, proto)
      logsend ('Preparing data socket')
      # another used this socket if bomded
      serversock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
      logsend ('[ + ] Network socket options:')
    except socket.error, msg:
      logsend("error data socket")
      logsend (msg)
      serversock = None
      continue
    try:
      serversock.bind(sa)
      logsend ("".join('[ + ] Port: ')+str(config.config['PORT'])+(' on interface ')+str(config.config['HOST'])+(' was established !'))
      logsend ("".join('[ + ] Started listening max. ')+str(config.config['MAX_CONNECTION'])+str(' simultaneously connections'))
      serversock.listen(config.config['MAX_CONNECTION'])
    except socket.error, msg:
      logsend ("".join('[ - ] Filed to open port: ')+str(config.config['PORT'])+(' and listening because: ')+str(opisz_problem(msg)))
      serversock.close()
      serversock = None
      continue
    break


  if serversock is None:
    logsend ('Filed to open data socket')
    sys.exit(1)
  else:
    logsend ('Data socket ready !')

  """ Jeśli wszystko przebiegło zgodnie z planem, zaczynamy nasze działania """

  logsend ('Waiting for connections ...')

  while 1:
    clientsock, addr = serversock.accept()
    logsend ("".join('Connection from address: ')+str(addr[0]))
    logsend ("".join('Connection from port: ')+str(addr[1]))
    webtimereset(config.config['WEBtimeout'])
    # logsend(lastwebtime)
    thread.start_new_thread(handler, (clientsock, addr))


  logsend ('Server is closed')
  serversock.close()


if __name__ == '__main__':
    thread.start_new_thread(frontend,())
    sys.exit(main())
